---
layout: '@components/Layout/LayoutChangelogs.astro'
# layout: '../../../../components/Layout.astro'
title: 'How to Compile & Install Magic Lantern 2023 Working'
titlePostFix: 'Instruction'
tags: ['ah','yess']
description: |
    How to Compile & Install Magic Lantern 2023 Working
    Guaranteed working (minus 1 thing) how to build Magic Lantern No fatal error!
keywords: 'tech, fun, novelty, open source, gratis, free, MagicLantern, Canon, compile, fatal error'
author: 'JOELwindows7'
twitterAuthor: '@JOELwindows7'
date: 2022-11-27
pubDate: 2022-11-27
dateMod: 2022-11-30
dateExp: 9999-12-31
thumbnail : '/assets/img/perkedelbannerrender4KDCI.png'
thumbnailType : 'image/png'
thumbnailWidth : 4096
thumbnailHeight : 2160
thumbnailAlt : 'Perkedel banner'
thumbnailAudio: ''
thumbnailVideo: ''
type : 'article'
descriptionPrefix : 'DO NOT RATIO'
noIndex : false
noFollow : false
rating : ''
favIcon: '/favicon.ico'
favIconHD : '/Perkedel_Icon.png'
favIconHDType : 'image/png'
favIconHDAlt : 'Perkedel icon'
favIconHDWidth : 600
favIconHDHeight : 400
charSet : 'UTF-8'
language : 'en'
twitterSite : '@JOELwindows7'
twitterCard : 'summary_large_image' 
themeColor : '#0000aa'
ejectClarity : false
hideInfo : false
SauceChangelogURL: 'https://github.com/Perkedel/perkedel-astro/blob/main/src/pages/apps/wceload/Canon/Compile/MagicLantern.mdx'
SauceChangelogURLDirect: 'https://github.com/Perkedel/perkedel-astro/raw/main/src/pages/apps/wceload/Canon/Compile/MagicLantern.mdx'
# url: 'vv'
url: 'MagicLantern' # wtf? the URL is no longer automatic?!?!??!?
---
import MessageBoxTemplate from "@components/Messages/MessageBoxTemplate.astro";
import MagicLanternBigWarning from "@components/Messages/MagicLanternBigWarning.astro";
import MagicLanternBootflagTable from "@components/Elements/SparePart/MagicLanternBootflagTable.astro"
import Figurative from "@components/Elements/SparePart/Figurative.astro";
import PiracyForbidden from "@components/Messages/PiracyForbidden.astro"

# How to compile & install Magic Lantern (2023 Working 100% minus 1%)
This is an instruction of how to compile &/or install Magic Lantern for your Canon EOS DSLR & Mirrorless camera (except PowerShot & EOS with PowerShot firmwares).  
Also featuring QEMU compilation instruction Working 2023 100% minus 1%.
{/* JOELwindows7: I have this camera. I gotta get this running! */}

<p class="warning">Some URL syntax below uses Markdown format (<code><span>[example_link](https://example.com)</span></code>) which is the ones without <code>🔗&#xf08e;</code> (External link) symbols next to it & won't open in new tab! <b>Be sure to always use Middle Click the URL without External Link Symbols if you like to make sure staying here.</b></p>

## Build Compile:
### Notes
You must use exactly **Debian 11, Bullseye**, in which this stable release has GCC & G++ `10` series which are compatible with the ML Simplified source code we will be using.  

#### Using Windows Subsystem for Linux 
{/* pls don't use header! */}
<MessageBoxTemplate severity={2} paragraphTitle={true} headingTitle="Windows Only" detailSummary="Only for Windows">
    <p>This feature is only available for <b>Windows atleast 10</b> & up</p>
</MessageBoxTemplate>

Download Debian WSL <a class="Buttonnize" href="https://www.microsoft.com/store/productId/9MSVKQC78PK6" target="_blank" rel="noopener noreferrer">here</a>.

Once installed, simply launch `Debian` app & configure your Debian WSL for the 1st time. **Make sure you remember your username & password for this WSL**.

#### Using virtual Machine / Container
Download the latest stable build of Debian, <a class="Buttonnize" href="https://www.debian.org/download" target="_blank" rel="noopener noreferrer">here</a>  
You only need the very top Netinst ISO file.

Make sure you also provided the virtual machine / container sufficient amount of specifications, e.g.:
- 3 Cores
- 2048 MB / 2 GB RAM
- 1020 x 720 display
- 20 GB reserved virtual disk space, we recommend using Dynamic Allocation

add / mount the Debian Netinst ISO you've just downloaded & boot from it. 
Follow instructions on the virtual screen. 
Don't forget to make your main user an admin / sudoers.
**Make sure you remember your username & all passwords (both main user & root) for this virtual machine / container**

##### Download the virtual machine / container image
- VHD OVA. https://archive.org/details/debian-bullseye-ml . username = `magiclantern`, pass = `magiclantern`.

Tips: Please go to Recompilation section below to clean up the compilation first for the best result.

##### ERROR: `USERNAME is not in the sudoers file.  This incident will be reported.`
If somehow that after installation your main user did not exist in the sudoers group, you can do the following to fix this problem:
- Reboot to Recovery! 
    - When you started your container, you will first encounter `GRUB` or described as a selection inside a rectangle with countdown at the bottom. 
    - Immediately press arrow key to interupt the countdown.
    - select *`Advanced Options for Debian`*. `Enter`.
    - Pick the most recent Linux kernel version (usually on the top), and **PICK ONLY** the ones with `(recovery mode)` next to it.
    - Why recovery you ask? We assume since your user account failed to exist in the sudoers then any root command (including `su -` or `su root`) may go completely out of function.
    - We use this way for the best result possible.
- Wait until a blue screen with gray selection box appears.
- Pick *`root console`*. type your root password if asked.
- Make sure sudo is installed by trying to install `sudo`.
    - `apt-get install sudo -y`
    - If the result contains `sudo is already up to date`, and does not contain fatal errors, that mean you already have `sudo` installed yey!
- add your main user to `sudo` group by typing:
    - `adduser username sudo`
    - the `username` is your username, replace that with your username. 
    - e.g. say if your username is `godette`, you then instead type **`adduser godette sudo`** etc.
    - alternatively, you can use `usermod` command, so like `usermod -aG sudo YOUR_USERNAME`
- Just in case, set the correct permission in the sudoers configuration file:
    - `chmod  0440  /etc/sudoers`
    - usually, this file should already has proper permission as you installed Debian today.
    - unless you screwed up something including this, feel free to re-correct the permission once again just to be sure.
- exit the root console by typing `exit`, `Enter`, and reboot the virtual machine / container.
- Once you've came back to regular desktop, test your `sudo` first.
    - e.g. `sudo echo ahei dasandimian`
    - You should be able to see `ahei dasandimian` no problem if you followed this section instruction properly.

Further informations: 
<a href="https://www.linuxuprising.com/2019/09/fix-username-is-not-in-sudoers-file.html" target="_blank" rel="noopener noreferrer">https://www.linuxuprising.com/2019/09/fix-username-is-not-in-sudoers-file.html</a>
<a href="https://unix.stackexchange.com/a/258865/390514" target="_blank" rel="noopener noreferrer">https://unix.stackexchange.com/a/258865/390514</a>

### Use Source Code Edition of
names_are_hard's Magic Lantern Simplified. <a class="Buttonnize" href="https://github.com/reticulatedpines/magiclantern_simplified" target="_blank" rel="noopener noreferrer">Here GitHub repository</a>  
the QEMU (simulates Canon firmware) will be on a separate repository of <a class="Buttonnize" href="https://github.com/reticulatedpines/qemu-eos" target="_blank" rel="noopener noreferrer">This GitHub repository</a>

#### Needed Package
You will need the following package, as we have collected, tested, & guessed the equivalent from various instructions:
- `git` **IMPORTANT**
- `mercurial` optional since our ML source code edition do not use `hg`
- `build-essential` **IMPORTANT**
- `make`
- `gcc`
- `gcc-arm-none-eabi`
- `python3-docutils`
- `python2`
- `bison`
- `flex`
- `zip`
- `unzip`
- `zlib1g-dev`
- `libgtk`
- `autoconf`
- `libtool`
- `libsdl-console`
- `libgtk2.0-dev`
- `mtools`
- `libsdl-console-dev`
- `perl` used for [CHDK ROM dissasembly](https://www.magiclantern.fm/forum/index.php?topic=12177.0 ) script. [more info here](http://chdk.wikia.com/wiki/GPL_Tools )
- etc.

Therefore, pls do these commands bellow:
```bash
sudo apt update # to update repository cache
sudo apt upgrade -y # to upgrade all installed packaged, always confirm
# and these packages finally:
sudo apt install git build-essential make cmake gcc g++ gcc-arm-none-eabi zlib1g-dev libglib2.0 autoconf libtool libsdl-console flex bison libgtk2.0-dev mtools libsdl-console-dev install make gcc gcc-arm-none-eabi mercurial gcc-mingw-w64 python3-docutils zip perl
```
or use `synaptic` for graphical package management experience.  
Simply search by those package names above, mark them for installation, & apply.

### Steps:
#### Setup
clone these two. It is also recommended to clone them in a dedicated folder.
```bash
# (RECOMMENDED) make a special folder & go inside it
cd # or `cd ~`
mkdir -p sauce/simplified
cd sauce/simplified
# This to ensure you have tidy working space & clean home folder.

# Clone Magic Lantern Simplified
git clone https://github.com/reticulatedpines/magiclantern_simplified

# Clone the `qemu-eos`
git clone https://github.com/reticulatedpines/qemu-eos
```

#### Compilation
##### Magic Lantern itself

```bash
# Use the same special folder with instruction above or whereever `magiclantern_simplified` clone folder is
cd ~/sauce/simplified

# go to your Magic Lantern Simplified folder
cd magiclantern_simplified

# Go to which camera model you would like to compile for
# let's say you have 200D firmware v1.01, so go to 200D.101 platform folder!
cd platform/200D.101

# (OPTIONAL) you may need to update the documentations files
make docq
# PLS HELP: still failed

# then just make zip to compile & zip the ML package
make zip
```

You should see a zip file with names like this:
```
magiclantern-Nightly.YYYYMMMDD.MODELVERSION.zip
```

so say you have just compiled 200D firmware version 1.01 at certain date, so the file will looks like:
```
magiclantern-Nightly.2022Nov19.200D101.zip
```
<a class="Buttonnize" href="/assets/zip/magiclantern-Nightly.2022Nov19.200D101.zip" target="_blank" rel="noopener noreferrer">Download</a>

###### Furthermore
It is possible to compile & zip every single version exist in this ML repository.  
simply `make zip` in the root ML Simplified directory, without going to which platform folder.
```bash
cd ~/sauce/simplified/magiclantern_simplified
make zip
```

and as usual, the zip files will be on each platform folder.

##### QEMU EOS
Further informations:  
<a class="Buttonnize" href="https://github.com/reticulatedpines/qemu-eos/tree/qemu-eos-v4.2.1/magiclantern" target="_blank" rel="noopener noreferrer">https://github.com/reticulatedpines/qemu-eos/tree/qemu-eos-v4.2.1/magiclantern</a>

```bash
# Use the same special folder with instruction above or whereever `magiclantern_simplified` clone folder is
cd ~/sauce/simplified

# Make sure you have cloned `magiclantern_simplified` before,
# instruction above section

# Go inside `qemu-eos` you've just cloned, switch branch to v4.2.1, & then get out of it
cd qemu-eos; git switch qemu-eos-v4.2.1; cd ..
# Important, since the v4.2.1 branch is atleast the most compatible with our compilation library we have.

# Create separate build folder next to our QEMU called `qemu-eos-build`, then go inside it
mkdir qemu-eos-build
cd qemu-eos-build

# Begin the configuration procedure with the following parameters
../qemu-eos/configure --target-list=arm-softmmu --enable-plugins --disable-docs --enable-vnc --enable-gtk

# Make with 16 threads. 
# You can change how many thread you want, 
# but be sure not to get too high than your computer specification.
make -j16

# Make the plugins
make plugins

# Copy the Magic Lantern library into our QEMU plugin folder
cp tests/plugin/libmagiclantern.so arm-softmmu/plugins/

# Done. you can now run the QEMU.
# go back to `qemu-eos` repository & see the help for further instruction
cd ../qemu-eos/magiclantern
./run_qemu.py --help
# you will now run QEMU with that `run_qemu.py` command above.

# Be sure to provide your own ROM you dumped from your own Canon EOS camera!
# Perkedel nor X0p1r4t3 will not provide neither accepting sparsdated Canon ROM firmware files 
# due to abusive DMCA laws extradited from Earth where Canon comes from,
# unless Canon goes bankrupt & the files becomes rare & risk disappearing.
```

If you made some changes in this QEMU EOS, don't forget to recompile & 
make sure the Magic Lantern library is still placed properly to your QEMU EOS plugin folder
```bash
make -j16 && make plugins && cp tests/plugin/libmagiclantern.so arm-softmmu/plugins/
```
Note however, that you may need to do cleanup (instruction below) for the best result OR if the recompilation fails.

#### Re-compilation
Before recompiling after either change or not or something else, make sure you have cleaned up the compilation result for the best outcome possible by doing the following:
```bash
# cleanup Magic Lantern
cd ~/sauce/simplified/magiclantern_simplified
make clean

# return home
cd

# cleanup QEMU EOS
cd ~/sauce/simplified/qemu-eos-build
make clean
```

##### Magic Lantern itself
Simple go to which platform folder you'd like & then recompile
```bash
# for example to recompile 200D firmware v1.01 again..
cd ~/sauce/simplified/magiclantern
cd platform/200D.101
make zip

# OR you can recompile all versions of ML by start 
# compiling at the root of the repository instead of which platform
cd ~/sauce/simplified/magiclantern
make zip
```

##### QEMU EOS
You need to reconfigure the QEMU EOS again, then compile the QEMU & the plugins, 
& recopy the ML library back to QEMU plugin folder
```bash
# make sure you are still in the QEMU EOS build folder
cd ~/sauce/simplified/qemu-eos-build

# reconfigure so the compiler can see installed libraries you had right now
../qemu-eos/configure --target-list=arm-softmmu --enable-plugins --disable-docs --enable-vnc --enable-gtk

# start recompilation both the QEMU & plugins
# & recopy the ML library to the plugin folder.
make -j16 && make plugins && cp tests/plugin/libmagiclantern.so arm-softmmu/plugins/

```

<hr/>

## Preparing QEMU EOS
Further informations:
<ul>
    <li><a class="Buttonnize" href="https://foss.heptapod.net/magic-lantern/magic-lantern/-/blob/branch/qemu/contrib/qemu/README.rst" target="_blank" rel="noopener noreferrer">How to QEMU</a> in Original Source code, QEMU branch</li>
    <li><a class="Buttonnize" href="https://github.com/reticulatedpines/qemu-eos/tree/qemu-eos-v4.2.1/magiclantern" target="_blank" rel="noopener noreferrer">How to QEMU</a> in Simplified QEMU EOS repository, v4.2.1 branch</li>
    <li><a class="Buttonnize" href="https://www.magiclantern.fm/forum/index.php?topic=23369.0" target="_blank" rel="noopener noreferrer">Canon EOS 4000D / 3000D / Rebel T100 Development</a> in ML Forum, where a1ex had attempted to emulate the camera using QEMU.</li>
</ul>

<MessageBoxTemplate severity={1} paragraphTitle={true} headingTitle={"Untested"} detailSummary={"Incomplete & unconfirmed instruction"} opens={true}>
    <p>
        We are deeply apologize. However, instructions in this section below are still in progress.<br/>
        We have compiled stuffs we could understand from many replies & articles above<br/>
        Proceed at your own risk!, We are currently unable to test the step & optimize 
        the working condition due to a technical difficulties at the moment.<br/>
        We are working on the fix.
    </p>
</MessageBoxTemplate>

### Step 1. Dump the ROM from your Canon camera!
<PiracyForbidden piracyOn="Canon Firmware & Dumped ROM files"/>
- Acquire the ROM Dumper. for EOS with DiG!C Between 2 through 8 (2 ≤ DIGIC ≤ 8), [use a1ex's Portable ROM Dumper](https://www.magiclantern.fm/forum/index.php?topic=16534.0).; While DiG!C more than 8 & 10 (DIGIC 8 and 10), [use srsa's technic in Canon Basic Dumper](https://www.magiclantern.fm/forum/index.php?topic=25305.0 ) which utilizes [Canon Basic](https://chdk.fandom.com/wiki/Canon_Basic)
- For Portable ROM Dumper, we recommend that if available, use the matching `FIR` file provided. Choose the one that matches your model.
    Note that Low end / Entry Level to Advanced DSLR Cameras [**have different model name**](https://en.wikipedia.org/wiki/List_of_Canon_products#Digital_SLR_cameras ) for specific region. Following are which model that has different names equals with:
    - 3000D / 4000D / Rebel T100
    - 1500D / 2000D / Rebel T7 / Kiss X90
    - 1300D / Rebel T6 / Kiss X80 
    - 1200D / Rebel T5 / Kiss X70 
    - 1100D / Rebel T3 / Kiss X50
    - 1000D / Rebel XS / Kiss F 
    - 250D / Rebel SL3 / Kiss X10
    - 200D / Rebel SL2 / Kiss X9
    - 100D / Rebel SL1 / Kiss X7 
    - 850D / Rebel T8i / Kiss X10i
    - 800D / Rebel T7i / Kiss X9i
    - 760D / Rebel T6s / 8000D
    - 750D / Rebel T6i / Kiss X8i
    - 700D / Rebel T5i / Kiss X7i 
    - 650D / Rebel T4i / Kiss X6i
    - 600D / Rebel T3i / Kiss X5
    - 550D / Rebel T2i / Kiss X4 
    - 500D / Rebel T1i / Kiss X3 
    - 450D / Rebel XSi / Kiss X2 
    - 400D / Digital Rebel XTi / Kiss Digital X
    - 350D / Digital Rebel XT / Kiss Digital N 
    - 300D / Digital Rebel / Kiss Digital
    - 77D / 9000D (JP)
    - Fun Fictional Fact: Dasandim follows whatever Indonesian model name gets
- Get the SD Card. It must be formated within regular FAT series (FAT 12, 16, or 32). <mark class="error" style="font-weight:bold;">exFAT won't work</mark>.
- if you chose just `autoexec.bin` method, you must make the SD Card bootable, using [Pelican's EOScard](https://pel.hu/eoscard/ ) utility OR [petabyt's ML Installer](https://github.com/petabyt/mlinstall) (There is `Card` tab that also lets you modify the bootflag of the SD card).
- It is recommended to just stick with `FIR` method instead. 
    - Simply place the ROM Dumper firmware at the root of the SD Card, 
    - **No need to make it bootable**,
    - Insert the SD card into the camera & close the card / battery door. Wait until the card successfully read looking at the LED.
    - Turn on & Run firmware update. The file will dump the firmware of your camera. You should see up to 4 ROM files. 2 are both the ROM files & rest 2 are each MD5
    - Successful dump should roughly looks something like [this, on the following forum thread replies](https://www.magiclantern.fm/forum/index.php?topic=14732). Today's dumper may looks different, but most importantly ensure there is no fatal error.
    - <mark class="warning" style="font-weight:bold;">IMPORTANT!!!</mark> Always check both ROM files MD5 checksum after successful dump. Save both MD5 checksum result somewhere safe.
        - Windows MD5 checksum software is available using [https://www.winmd5.com/](https://www.winmd5.com/)
        - Linux & macOS should have a program called `md5sum` (you may have this already pre-installed, or you can search up `md5sum` in your `synaptic` or `pacman`). simply type `md5sum -C *.MD5` to check all MD5 present.
- You may need to repeat above MD5 test on the same card, then on another card & ensure the MD5 are pretty much similar.
    - Sometimes, Some camera only has ROM1 connected, hence ROM0 contains just random noise which will may results in ROM0's MD5 mismatch. **This is normal.**
- Safe all ROMs & MD5s in a confidential place, <mark class="error"><b>DO NOT SHARE ANY OF THE ROM PUBLICLY (even if you live in X0p1r4t3 city)</b>, as you are holding extremely proprietary Canon softwares</mark>. Remember, Earth DMCA agencies extradites across galaxies, and they have Dasandim pinpoints!

### Step 2. Insert the ROMs into the emulator!
According to `run_qemu.py` in your Simplified QEMU EOS, by default ROMs will be placed in the `roms` folder located next `qemu-eos` & `qemu-eos-build`.  
```bash
joelwindows7@JOEL-ROG-GL503GE:~/sauce/simplified/qemu-eos/magiclantern$ ls
build_qemu_direct.py  cam_config   docker_builder  ml_tests   run_qemu.py
build_qemu_docker.py  disk_images  ml_qemu         README.md  run_tests.py
joelwindows7@JOEL-ROG-GL503GE:~/sauce/simplified/qemu-eos/magiclantern$ ./run_qemu.py --help
usage: run_qemu.py [-h] [-q QEMU_BUILD_DIR] [-r ROM_DIR] [-s SOURCE_DIR] [--boot] [--gdb] [-d [D_ARGS ...]]
                   {1000D,100D,1100D,1200D,1300D,200D,400D,40D,450D,500D,50D,550D,5D,5D2,5D3,5D3eeko,5D4,5D4AE,600D,60D,650D,6D,6D2,700D,70D,750D,760D,77D,7D,7D2,7D2S,800D,80D,850D,A1100,EOSM,EOSM10,EOSM2,EOSM3,EOSM5,EOSRP,M50,R}

Script to run Qemu with EOS support.

positional arguments:
  {1000D,100D,1100D,1200D,1300D,200D,400D,40D,450D,500D,50D,550D,5D,5D2,5D3,5D3eeko,5D4,5D4AE,600D,60D,650D,6D,6D2,700D,70D,750D,760D,77D,7D,7D2,7D2S,800D,80D,850D,A1100,EOSM,EOSM10,EOSM2,EOSM3,EOSM5,EOSRP,M50,R}
                        Name of model to emulate, required

optional arguments:
  -h, --help            show this help message and exit
  -q QEMU_BUILD_DIR, --qemu-build-dir QEMU_BUILD_DIR
                        build dir for ML Qemu, default: /home/joelwindows7/sauce/simplified/qemu-eos-build
  -r ROM_DIR, --rom-dir ROM_DIR
                        location of roms, default: /home/joelwindows7/sauce/simplified/roms
  -s SOURCE_DIR, --source-dir SOURCE_DIR
                        location of Magic Lantern repo, used to find stubs etc for emulation. Default:
                        /home/joelwindows7/sauce/simplified/magiclantern_simplified
  --boot                attempt to run autoexec.bin from card (set cam bootflag), default: False
  --gdb                 start Qemu suspended, until gdb connects on port 1234
  -d [D_ARGS ...], --d-args [D_ARGS ...]
                        space separated list of qemu '-d' arguments. See help for qemu for complete list
```

say that in your working folder looks something like this:
```bash
joelwindows7@JOEL-ROG-GL503GE:~/sauce/simplified$ ls
magiclantern_simplified  qemu-eos  qemu-eos-build
```
Therefore, you'll need to create a directory called `roms` by typing `mkdir roms`. do make sure that folder is placed among your Magic Lantern workspace, **NOT inside any of the source code folder**.
```bash
joelwindows7@JOEL-ROG-GL503GE:~/sauce/simplified$ mkdir roms
joelwindows7@JOEL-ROG-GL503GE:~/sauce/simplified$ ls
magiclantern_simplified  qemu-eos  qemu-eos-build  roms
```
However, you can change where the rom folder would be loaded at with `-r ROM_DIR` or `--rom-dir ROM_DIR` where `ROM_DIR` (when going to execute `run_qemu.py`) if folder you choose where both of your ROM located at.

Copy the ROM files you just saved into that new `roms` folder or whereever you would later choose with `-r` argument. We recommend that you leave the setting at its default for now.

### Step 3. (Optional, perhaps needed) Apply patch into the ROM files.
- For some models, you may need to apply some few patches. e.g. in a1ex attempt, he did applied the patch for the EOS 4000D / 3000D / Rebel T100 emulation.
```bash
# Go into the `roms` folder
cd ~/sauce/simplified/roms

# write the BOOT.BIN from ROM1.BIN & then overwrite part of the ROM1 with stuffs from BOOT.BIN just there.
dd if=ROM1.BIN of=BOOT.BIN bs=64k skip=1 count=1
dd if=BOOT.BIN of=ROM1.BIN bs=64k seek=511
```
- Additionally, ROM0 may not be needed anymore, such as above with 3000D.
    Additional Notes for 3000D: Will add to simplified later.
    - change flash model ID to 0x003825C2 (1300D has 0x003925C2) (in the Stubs)
    - CURRENT_TASK 0x2F53C (in the Stubs)
    - 0xFE1171B4 DebugMsg (in the EOS C code)
    - 0x3888 task_create (in the EOS C code)

### Step 4. Run the emulation
Once done, you can run the emulation.
```bash
# Make sure you're in the QEMU-EOS Magic Lantern folder
cd ~/sauce/simplified/qemu-eos/magiclantern

# Attempt to run this
#./run_qemu YOUR_MODEL_ACCORDING_TO_HELP
# You must replace `YOUR_MODEL_ACCORDING_TO_HELP` (required) with available 
# models in the run qemu help. say your model is 1000D & you had both of the ROMs, so
./run_qemu 1000D

# & if you had different ROMs in another folder, you can have that too
./run_qemu -r ~/sauce/simplified/roms/200D 200D 
# the model name shall be placed the last as 
# that argument in the python script was programmed like that, to be positional.
# note once again, you may need to have magiclantern_simplified cloned too as well.
```

Enjoy.
{/* 

SEPAAAAAAAAAAAAAAAAAAARAAAAAAAAAAAAAAAAAAAAAAAAAATE

 */}
<hr/>
## Installation
### Notes
For the impatient: just follow the quick install guide from the 
<a class="Buttonnize" href="https://builds.magiclantern.fm/" target="_blank" rel="noopener noreferrer">download page</a>. <br/>
For a more thorough description of the install process, including what to do when things go wrong, keep reading.

##### Before installing Magic Lantern you need to:
- Know how to use a computer (how to download a file, how to unzip an archive, how to browse the web and read the forum…)
- Use your camera without ML for a few months. When you are confortable with Canon firmware, consider installing Magic Lantern.
- Do your research. There is a lot of information available on this site. Read the user guide, the FAQ, and browse the [forum](https://magiclantern.fm/forum).
- Be patient. Magic Lantern can overwhelm with the amount of functions added. But it is actually very easy to use once you know the basics.

### <mark class="warning">Caution & VERY IMPORTANT!!!</mark>
<MagicLanternBigWarning/>

### Get the right firmware version
- Go to [https://builds.magiclantern.fm/](https://builds.magiclantern.fm/) and download the Magic Lantern zip file for your camera
- Make sure you are running the right Canon firmware version, specified on the download page. Links to matching Canon firmware files are included in `Installation` and `Useful Links`.
- You can check your firmware version by setting your mode dial to **`M` (Manual)** and looking in the Canon menu.
- Nothing bad will happen if you try to run ML on a different firmware version. Magic Lantern checks firmware version before attempting to run. 
    If there is a mismatch you will get an error message screen and you have to pull the battery to proceed. With older (outdated) Magic Lantern versions you will get a blinking LED instead. You still have to pull the battery.

### Steps:
#### NEW INSTALL (Work in Progress)
as in:
<a class="Buttonnize" href="https://wiki.magiclantern.fm/new-install" target="_blank" rel="noopener noreferrer">This <b>NEWER</b> Install Instruction</a> <br/>
Please check this guide above for up to date instruction. Instructions will be syndicated here for redundancy, in event of disaster.

##### Compatible for:
Newer ML ports & relatively new camera
- 1300D / Kiss X80 / Rebel T6
- 4000D / 3000D / Rebel T100
For other models, please refer to Current Install section bellow.

##### Install
1. Connect the camera to a Windows 7/10 or Linux computer with a USB cable.
2. Download mlinstall ([https://github.com/petabyt/mlinstall](https://github.com/petabyt/mlinstall)).
3. On Windows, extract the files and run the EXE. On Linux, you'll need to set the `.AppImage` file as executable. Here's a quick tutorial: [https://discourse.appimage.org/t/how-to-run-an-appimage/80](https://discourse.appimage.org/t/how-to-run-an-appimage/80 )
    Here I click `Get Device Info`` to see if it can detect the device.
    <Figurative figcaption="Fig. 1 - Result of Clicked <code>Get Device Info</code>">
        <img src="https://wiki.magiclantern.fm/_media/new-install:mlinstall_1.png" alt="Fig 1 - Result of Clicked `Get Device Info`" width="100%"/>
    </Figurative>

On first run on Windows, it should **not** work. Here's what to do:
1. <b class="error">DO NOT USE ZADIG for now! IT'S SLOW & DESTRUCTIVE!!</b> use [mcuee's libUSB](https://github.com/mcuee/libusb-win32/releases/download/snapshot_1.2.7.3/libusb-win32-bin-1.2.7.3.zip ) instead! [Learn more in petabyt's reply](https://www.magiclantern.fm/forum/index.php?topic=17969.msg240894#msg240894 )
2. (Backup) ~~Download and run [`Zadig`](https://zadig.akeo.ie/).~~
3. (Backup) ~~On the Canon Camera device, replace `WinUSB` with `libusb-win32` as in this GIF: [https://github.com/petabyt/mlinstall/blob/master/assets/zadig.gif](https://github.com/petabyt/mlinstall/blob/master/assets/zadig.gif)~~
4. (Backup) *In order to revert this change, simply repeat the steps and choose `WinUSB` instead of `libusb-win32`*. Some Windows software may fail to work if this change is not reverted.
5. (Backup) Once you have verified that USB communication is working, click `Enable Boot Disk`.
6. (Backup) *In order to revert the camera to factory settings, click `Disable Boot Disk`*.
    <Figurative figcaption="Fig. 2 - Enabling Bootdisk to the camera">
        <img src="https://wiki.magiclantern.fm/_media/new-install:mlinstall_2.png" alt="Fig. 2 - Enabling Bootdisk to the camera" width="100%"/>
    </Figurative>
1. Unplug the camera SD card from the camera.
2. Insert the camera SD card into your computer. You might need an adapter.
3. Ensure that your SD card is named `EOS_DIGITAL`. mlinstall searches for a storage device named `EOS_DIGITAL` and writes to the first one it finds.
4. In mlinstall, navigate to the `Card` tab and click `Write card boot flags`. This will write data to the SD card. It's a good idea to format the card in the camera first.
5. *In Linux, eject / unmount the card before removing it*. Usually in your file manager left sidebar, you should see &#xf052; (Eject) Button next to `EOS_DIGITAL` media. Click the &#xf052; eject button to unmount the SD Card.
    <Figurative figcaption="Fig. 3 - Enabled Bootflag to the SD Card">
        <img src="https://wiki.magiclantern.fm/_media/new-install:mlinstall_3.png" alt="Fig. 3 - Enabled Bootflag to the SD Card" width="100%"/>
    </Figurative>
1. Once you have written the card flags, you will need to download a build for your camera. Make sure that the model ID and firmware version of your camera matches the build. (you can check it in the Canon menu). You might need to downgrade or upgrade.
2. Extract the Magic Lantern release zip file contents onto the SD card. Make sure that `autoexec.bin` and the `ML` folder are at the top directory, alongside `DCIM`.
    <Figurative figcaption="Fig. 4 - Basic folder structure of installed Magic Lantern in the SD Card">
        <img src="https://wiki.magiclantern.fm/_media/new-install:mlinstall_3.png" alt="Fig. 4 - Basic folder structure of installed Magic Lantern in the SD Card" width="100%"/>
    </Figurative>
1. Insert SD Card into camera and turn it on. On first startup, `ROM1` and `ROM0` will be backed up. In the picture settings screen in **`M` (Manual)** mode, press the `Q` / `Av` button (or <b style="color:dodgerblue;">&#xf1f8;</b> `DELETE/TRASH` button).

##### Uninstalling Magic Lantern
1. Format the card <b class="warning">(and back up any data first!)</b>
2. Run mlinstall again and click `Disable Boot Disk`.

> Note that mlinstall has a `Destroy Card Boot Flags` feature that can make the SD Card non-bootable. (revert it to normal setting) After you run it, you will not need to format your card.

##### Troubleshooting
###### 1300D / Kiss X80 / Rebel T6
You may either have to downgrade or upgrade your firmware to a specific version. 
Here are some guides showing how to downgrade your firmware: 
- [https://magiclantern.fm/forum/index.php?topic=18941.0](https://magiclantern.fm/forum/index.php?topic=18941.0 )
- [https://www.magiclantern.fm/forum/index.php?topic=24926.0](https://www.magiclantern.fm/forum/index.php?topic=24926.0 )
A firmware file archive can be found here: 
- [https://pel.hu/eoscard/](https://pel.hu/eoscard/ )

> ccritix / critix: “Try to do a firmware update to version 1.1.0. (even if you have exactly this version on your device). Then you can try to test ML. This problem seems to exist on many devices. I suffered the same with my device. After an “update” to version 1.1.0, I was able to work on ML.”

{/* ==========================================

SEPARATE

============================================= */}
<hr/>

#### CURRENT INSTALL
as in:
<a class="Buttonnize" href="https://wiki.magiclantern.fm/install" target="_blank" rel="noopener noreferrer">This Install Instruction</a> 
Please check this guide above for up to date instruction. Instructions will be syndicated here for redundancy, in event of disaster.

##### Compatible for:
Any older cameras & cameras not listed on the New install above.

##### First install guide
###### Step 1. Preparing your camera
- Use a **fully charged Canon battery** <mark style="font-size:1.7em;font-weight:bolder;">(original, NOT third party)</mark>;
- Remove any accessories from your camera (such as battery grip or external flash);
- Make sure you have a card reader.
- Double-check your Canon firmware version.
- Rotate your mode dial to **`M` (Manual)** position
- Recommended: Restore your camera to default settings (`Clear settings`, see picture in the Big red warning above). Remember this will reset all canon settings and removes custom picture styles!

###### Step 2. Installation
<a href={`javascript:openFullImage("https://wiki.magiclantern.fm/_media/new-installer.png?cache=","Example of successful Magic Lantern installation")`}>
<img src="https://wiki.magiclantern.fm/_media/new-installer.png?cache=" alt="Example of successful Magic Lantern installation" width="25%" style="float:right"/>
</a>
- Format the card **in the camera** (<mark>low-level format</mark>).
- Unzip **all** of the files from Magic Lantern zip archive to the **root** of your card.
- Launch the **`Firmware Update`** process from the Canon menu and follow the messages on the screen.
- Once you see the **green confirmation screen**, restart your camera. Done.
- If anything goes wrong, check the **Troubleshooting** section below.

###### Step 3. Magic Lantern first startup
{/* <b style="color:dodgerblue;">&#xf1f8;</b> `DELETE/TRASH` */}
- Go to Canon menus and restore your preferences. Don't forget these:
    - On 550D/60D/600D, enable manual video exposure.
    - On 5D Mark II and 50D, enable LiveView shooting (a button right beside of your viewfinder cup).
    - You may also have to re-install your custom picture styles
- In LiveView, toggle the **`INFO/DISP`** button (usually north-west or up-right next to D-pad) until you see the Magic Lantern audio levels and footer bar.
- Press the <b style="color:dodgerblue;">&#xf1f8;</b> `DELETE/TRASH` button to open ML menu and **`READ THE HELP TEXT`** that pops up.
- Read the User Guide and start using Magic Lantern.
- **Don't forget to wait for LED confirmation before removing the card!** (unless you use a 550D)

##### Installing Magic Lantern on other cards
<a href={`javascript:openFullImage("https://wiki.magiclantern.fm/_media/eoscard2.jpg","Screenshot of Pelican's EOScard Utility")`}>
<img src="https://wiki.magiclantern.fm/_media/eoscard2.jpg" alt="Screenshot of Pelican's EOScard Utility" width="25%" style="float:right"/>
</a>
- Simply repeat **Step 2** above on every card you would like to use Magic Lantern.
- If you prefer to skip the firmware update step and prepare your cards from the PC, you may copy ML files on your card and make it bootable with a special utility: [EOScard](http://pel.hu/down/EOScard.exe ) for Windows, [MacBoot](http://www.zenoshrdlu.com/macboot/macboot.html ) for macOS, or [make_bootable.sh](https://foss.heptapod.net/magic-lantern/magic-lantern/-/blob/branch/unified/contrib/make-bootable/make_bootable.sh ) for macOS/Linux in command line.

This table below explains where magic strings must be written depending on Filesystem type & version (done by tools above):  
{/* |FAT version    |Volume Label = `EOS_DEVELOP`   |Bootcode+2 = `BOOTDISK`    |`SCRIPT`   |     
|---------------|-------------------------------|---------------------------|-----------|  
|FAT12/16   |0x2b/43    |0x40/64    |0x1f0  |  
|FAT32   |0x47/71    |0x5c/92    |0x1f0  |  
|ExFAT  |0x82/130    |0x7a/122    |0x1f0  |   */}
<MagicLanternBootflagTable/>

`VBR` checksums must be updated for ExFat  
`SCRIPT` is for Canon basic.

##### Updating Magic Lantern
- Simply delete your old Magic Lantern files from your card and copy the new ones.
- You can keep your configuration files (the ML/SETTINGS directory from your card).

##### Uninstalling Magic Lantern
<MessageBoxTemplate severity={2} paragraphTitle={true} headingTitle={"DO NOT just delete the Magic Lantern files from the card!"} detailSummary={"If you do, the camera will freeze at startup and you'll have to take the battery out."} opens={true}>
    <p>Please follow below instruction on how to properly uninstall Magic Lantern!</p>
</MessageBoxTemplate>

###### Uninstalling ML from one card
- Format that card from the camera (select this option: *Format card*, ***remove Magic Lantern***) and reboot. Your camera will load the original firmware when you use that card.

###### Uninstalling ML from the camera
- With a Magic Lantern card, launch the **`Firmware Update`** process and follow the instructions on-screen.
- <mark class="warning">Re-installing Canon firmware will <b>not</b> remove Magic Lantern.</mark>

##### Troubleshooting
- **If the card LED blinks continuously AND the camera is unresponsive**, please report an issue (to [Emergency Camera Brick](https://www.magiclantern.fm/forum/index.php?board=45.0) section) and show them the LED blinking sequence (a short video will do, Recommended using [Odysee (Invite link)](https://odysee.com/$/invite/@JOELwindows7) or [YouTube (burner Gmail is okay)](https://youtube.com)). In older versions, this used to mean “`wrong firmware version`”, but new builds are now able to show a message on the screen, regardless of your Canon firmware version.
- **If you have a different Canon firmware version**, please use the one from our [download page](http://builds.magiclantern.fm/ ) (select camera, scroll to Installation).
- **If the screen does not turn on, but autofocus works**, remove the battery and format the card. This happens when the card is bootable, but autoexec.bin is not there.
- **Check if all doors are closed**. The camera will not boot if any of the card or battery doors are open !
- **If the camera does not boot** (seems dead), **remove the battery and the card**. Then put the battery back and try to boot the camera without card. Then put a formatted card in the camera and try to boot **without** Magic Lantern. Only after you are sure the camera is OK, you can try to see what's wrong with Magic Lantern.
- **If the camera asks for a firmware update**, place Canon firmware on the card (this was a problem in older versions).
- <b class="error" style="font-size:1.7em;">DO NOT use a bootable card without a working autoexec.bin on it!</b> If you do, remove the battery immediately, **switching the camera off is not enough !!!**
- Check the issue tracker (both [Original Source](https://foss.heptapod.net/magic-lantern/magic-lantern/-/issues) code & [Simplified](https://github.com/reticulatedpines/magiclantern_simplified/issues)) for similar problems; if you can't find the solution, create a new issue there according to your ML edition (e.g. 200D compiles from Simplified, so create issue in simplified; others go to original source code).
- If you get “`ML directory not found! Please copy all ML files.`” during installation → [FAQ](https://wiki.magiclantern.fm/faq#during_installation_error_message_ml_directory_not_found_please_copy_all_ml_files_appears ).


##### Important notes
- <mark class="warning" style="font-size:1.7em;font-weight:bolder;">After opening the card door, always wait for LED confirmation (or for 5 seconds) before removing the card!!!</mark>
- [**Early generation EyeFi cards may not work**](http://www.flickr.com/groups/magiclanternfirmware/discuss/72157627990119618/#comment72157627879367185 ); other WiFi cards may work properly.
- **SD-to-CF adapters are not supported!**
- If you have a bootable card and have the `BOOTDISK` flag set in the camera (which the installer does), and you do not have an `AUTOEXEC.BIN` file on the card, the camera **WILL NOT BOOT!** It will hang and not wake up until the battery is removed.
- If you encounter a “locked up” camera, **quickly remove the battery**.
- When in doubt, remove the battery and reboot.
- **And, remember that this software can damage or destroy your camera.** Perkedel nor Magic Lantern will be responsible for damages due to either negligence, careless, and/or unforseen disaster / *force majeur*

## Further steps
You may wanted to learn the following stuffs if you'd like to go further & perhaps contribute:
- `C`. A programming language. Core of everything and used to program things like an Operating system, including Linux kernel, Embedded devices, etc. Many programming languages takes inspiration from `C`'s syntax.
- [`Ghidra`](https://ghidra-sre.org). A Software Reverse Engineering framework built by researchers at National Security Agency in USA, Earth. Used to dissasemble binary files & allows deep analysis upon. You can use this to dissasemble Canon ROM files for let's say to find component addresses & help you build stubs.

## Credits
### Stuffs
- [ccritix's 3000D Platform folder](https://github.com/ccritix/magic-lantern/tree/branches/1300D/platform/4000D.100 ) Complete with Stubs. Lacks the Installation folder atm. OR try using libUSB method?
- [names_are_hard's how to QEMU in Magic Lantern Simplified](https://github.com/reticulatedpines/qemu-eos/tree/qemu-eos-v4.2.1/magiclantern )
- [`eos.c` in ccritix](https://github.com/ccritix/magic-lantern/blob/branches/1300D/contrib/qemu/eos/eos.c) Notice the `4000D` definition! Ctrl + F and take a look for `4000D` Flash ID & stuffs.
- [`eos.c` in names_are_hard](https://github.com/reticulatedpines/qemu-eos/blob/qemu-eos-v4.2.1/hw/eos/eos.c) No 4000D definition, but `1300D` definition! Ctrl + F that too, it's in **Enumeration**. I gotta bring this `4000D` in!
- [https://github.com/reticulatedpines/qemu-eos/tree/qemu-eos-v4.2.1/magiclantern](https://github.com/reticulatedpines/qemu-eos/tree/qemu-eos-v4.2.1/magiclantern)

## End
by JOELwindows7  
Perkedel Technologies  
CC4.0-BY-SA
